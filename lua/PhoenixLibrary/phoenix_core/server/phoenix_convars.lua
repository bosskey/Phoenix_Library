local cvar_phxlib_timescale = CreateConVar("phxlib_timescale",1.0,{FCVAR_REPLICATED,FCVAR_NOTIFY,FCVAR_DEMO})local cvar_phys_timescale = CreateConVar("phys_timescale",1.0,{FCVAR_REPLICATED,FCVAR_NOTIFY,FCVAR_DEMO})local cvar_phxlib_prediction = CreateConVar("phxlib_prediction",1.0,{FCVAR_REPLICATED,FCVAR_NOTIFY,FCVAR_DEMO,FCVAR_ARCHIVE})local numVelScale = 1.0 --hella optimization--cvars.DefineReplicatedConVar("phxlib_timescale")local bIgnoreReset = falsecvars.AddChangeCallback("phxlib_timescale",function (cvar, old, new)	numVelScale = tonumber(new) or 1	print("phxlib_timescale is now : "..tostring(new))	NextThink(function () bIgnoreReset = true RunConsoleCommand("phys_timescale",new) end)end)cvars.AddChangeCallback("phys_timescale",function (cvar, old, new)	--print("phys_timescale yeah...")	if bIgnoreReset then		bIgnoreReset=false	else		if cvar_phxlib_timescale:GetNumber() ~= 1.0 and cvar_phxlib_timescale:GetNumber() ~= tonumber(new) then			NextThink(function () bIgnoreReset = true RunConsoleCommand("phys_timescale",cvar_phxlib_timescale:GetString()) end)			for k, v in pairs(player.GetAll()) do				v:PrintMessage(HUD_PRINTCONSOLE,"Cannot change cvar 'phys_timescale' unless convar 'phxlib_timescale' is 1.0!")			end		end	endend)--ANNOYING--[[hook.Add("SetupMove","CORE",function (objPl,move) --Change speed	move:SetMaxSpeed(move:GetMaxSpeed()*numVelScale) --we need to find a constant change, not a variable that is constant  that we continually reduce by doing this...	move:SetMaxClientSpeed(move:GetMaxClientSpeed()*numVelScale)end)]]
local strModel = Model("models/katharsmodels/bullets/50AE/50AE.mdl")--local strModelCrushed = Model("models/weapons/w_pbullet2.mdl")local mat_HeatWave = Material("sprites/heatwave")function OBJ:Predict(tblSetup)	self.Origin = tblSetup.StartPos	self.Entity:SetAngles(tblSetup.Angle)	self.Speed = tblSetup.Speed*16 -- FPS TO UNITS per second	self.StartTime = CurTime()	self.Filter = {}	self.Shooter = LocalPlayer()endfunction OBJ:Receive(um)	self.Origin = um:ReadVector()	self.Entity:SetAngles(um:ReadAngle())	self.Speed = um:ReadLong()*16	self.StartTime = math.Round(um:ReadLong())	self.Shooter = um:ReadEntity()	self.Filter = {}endfunction OBJ:Initialize()	self.Entity:SetModel(strModel)	self.Entity:SetPos(self.Origin)	self:SetVelocity(self.Entity:GetAngles():Forward()*self.Speed)	self.traceData = {filter = self.Filter,mask=MASK_SHOT}	self.RicochetCount = 0endlocal tblMAT_Translate = {	"Impact.Concrete",	"Impact.Glass",	"Impact.Metal",	"Impact.Sand",	"Impact.Wood"}local tblNWPos = {}usermessage.Hook("NWBulletPos",function (um)	tblNWPos[um:ReadShort()] = um:ReadVector()end)hook.Add("HUDPaint","NWBulletPos",function ()	for k, v in pairs(tblNWPos) do		local pos = v:ToScreen()		surface.SetDrawColor(255,0,0,255)		surface.DrawLine(pos.x-5,pos.y,pos.x+5,pos.y)		surface.DrawLine(pos.x,pos.y+5,pos.x,pos.y-5)	endend)OBJ.FRAMECOUNT = 0function OBJ:Think()	if self.Config.FrameSkip > 0 then		if self.Config.FrameSkip > self.FRAMECOUNT then			self.FRAMECOUNT = self.FRAMECOUNT + 1			return true		end		self.FRAMECOUNT = 0	end	self.LastThink = self.LastThink or self.StartTime	local vecNewPos, fDelta = self:CalcMovePos(self.LastThink)	local bDie, vecEndPos, numAction, tr = self:DoMove(vecNewPos,fDelta)	self.Entity:SetPos(vecEndPos)	if self.PenetrateWorld.Active then		self.Entity:SetRenderBoundsWS(self.PenetrateWorld.EntryPos - self.Entity:GetAngles():Forward()*12,vecEndPos)	else		self.Entity:SetRenderBoundsWS(vecEndPos - self.Entity:GetAngles():Forward()*12,vecEndPos)	end	self.LastThink = CurTime()	if numAction == BULLET_HITNOTHING then --most likely, thus first to check and break out of elseif block			elseif numAction == BULLET_HITPROP then		--sound etc	elseif numAction == BULLET_HITLIVING then		--blood effect	elseif numAction == BULLET_HITSKY then		return false --die mofo	elseif numAction == BULLET_HITWORLD then		--hitfx	elseif numAction == BULLET_PENETRATEWORLD then		--uhhh, enter fx etc		self.Entity:SetMaterial("utility/noz")	elseif numAction == BULLET_DIGIN then		elseif numAction == BULLET_PENETRATEWORLD_EXIT then		self.Entity:SetMaterial("")	elseif numAction == BULLET_PENETRATEWORLD_ACTIVE then		end	return !bDieend--local mat_BloodTrail = Material("bloodtrail")--local mat_TunnelTrail = Material("TunnelTrail")local mat_penetrate_noz = Material("utility/noz")function OBJ:Render()	local numVelScale = GetConVarNumber("phxlib_timescale",1)	if self.Config.AllowSlowmoDrawing and numVelScale < 1 then		render.SuppressEngineLighting(true)		if self.PenetrateWorld.Active then			cam.IgnoreZ(true)			self.Entity:DrawModel()			cam.IgnoreZ(false)		else			self.Entity:DrawModel()		end		render.SuppressEngineLighting(false)	end	--if self.Penetrate.Active then		--if self.Penetrate.Entity:GetColor().a < 255 then			-- do tunnel draw from hit start to current position		--end	--else		--if self.Config.EnableHeatwave then			--visuals.UpdateEffect("HeatWave",self.Entity)		--end		--print("tracer mat type: "..self.Config.Tracer:GetName())		render.SetMaterial(self.Config.Tracer)		render.DrawBeam(self.Entity:GetPos() - self.Entity:GetAngles():Forward()*20,self.Entity:GetPos(),math.Rand(1,2),1,0,color_white)		--render.SetMaterial(mat_test)		--render.DrawBeam(self.Entity:GetPos() - Vector(0,0,12),self.Entity:GetPos(),15,0,1,color_white)	--endend
local DIR = "PhoenixLibrary/nw/"if not file.IsDir(DIR) then file.CreateDir(DIR) endhook.Add("ShutDown",NAME,function ()	if file.Exists(DIR.."pooled_strings.txt") then		file.Write(DIR.."pooled_strings.txt","")	endend)hook.Add("Initialize",NAME,function ()	if not file.Exists(DIR.."pooled_strings.txt") then file.Write(DIR.."pooled_strings.txt","") end	nw.PoolString("generic","blank")	resource.AddFile("data/"..DIR.."pooled_strings.txt")end)module("nw",package.seeall)local PooledStrings = {	["generic"] = {}}local function SavePooledStrings()	local strFile = ""	for strGroup, tblStrings in pairs(PooledStrings) do		local tblIndex = {}		for k, v in pairs(tblStrings) do			tblIndex[v] = k		end		strFile = strFile..strGroup..' '..table.concat(tblIndex,' ')..'\n'	end	file.Write(DIR.."pooled_strings.txt",strFile)endfunction PoolString(strGroup,str)	if type(str) ~= "string" then		str = strGroup		strGroup = "generic"	end	if string.find(strGroup,' ') or string.find(str,' ') then LibErrorHalt(NAME,"PoolString","Cannot pool string containing white space.") end	if not PooledStrings[strGroup] then		PooledStrings[strGroup] = {}	elseif PooledStrings[strGroup][str] then		LibErrorHalt("String '"..tostring(str).."' is already pooled.")	end	PooledStrings[strGroup][str] = table.Count(PooledStrings[strGroup]) + 1	SavePooledStrings()endfunction GetPoolStringID(strGroup,str)	if not PooledStrings[strGroup] then		LibErrorHalt("Pooled-string group '"..tostring(strGroup).."' does not exist")	end	if not PooledStrings[strGroup][str] then		LibErrorHalt("Pooled-string does not exist '"..tostring(str).."'")	end	return PooledStrings[strGroup][str]end
module("projectiles",package.seeall)local Type = {}local Projectiles = {}local PooledTypes = {}local PooledClasses = {}local Classes = {}--START PHASED OUT CODElocal NWOBJ = {} NWOBJ.__index = NWOBJfunction NWOBJ:GetVectorA() return self.Data:GetOrigin() endfunction NWOBJ:GetVectorB() return self.Data:GetStart() endfunction NWOBJ:GetVectorNormal() return self.Data:GetNormal() endfunction NWOBJ:GetAngle() return self.Data:GetAngle() endfunction NWOBJ:GetFloatA() return self.Data:GetMagnitude() endfunction NWOBJ:GetFloatB() return self.Data:GetRadius() endfunction NWOBJ:GetEntityA(ent) return self.Data:GetEntity() endfunction NWOBJ:GetEntityB(ent) return self.Data:GetSurfaceProp() endlocal function CreateNWOBJ(effectData)	local objNew = {}	setmetatable(objNew,NWOBJ)	objNew.Data = effectData	return objNewend--END PHASED OUT CODElocal function GetPooledClassData(strType,num)	if not PooledClasses[strType] then print("no classes in type '"..tostring(strType).."'") return {} end	return (PooledClasses[strType][num] or {}).data or {}endfunction _Register(strName, tblMeta)	table.insert(PooledTypes,strName)	Type[strName] = tblMetaendfunction RegisterClass(strType,strClass,tblClassData)	if not PooledClasses[strType] then PooledClasses[strType] = {} end	if tblClassData.Tracer then tblClassData.Tracer = Material(tblClassData.Tracer) end	PooledClasses[strType][strClass] = tblClassData	table.insert(PooledClasses[strType],{name=strClass,data=tblClassData})endlocal function Create(strType,tblClassData)	if Type[strType] then		local objNew = {}		setmetatable(objNew,Type[strType])		table.Merge(objNew.Config,tblClassData or {})		return objNew	endendlocal function GetClassData(strType,strClass)	if not PooledClasses[strType] then print("no classes in type '"..tostring(strType).."'") return {} end	return PooledClasses[strType][strClass] or {}endlocal PredictedData = {}function Shoot(strType,strClass,tblSetup)	if GetConVarString("phxlib_prediction") == "1" then		PredictedData.type = strType		PredictedData.classdata = GetClassData(strType,strClass)		PredictedData.setup = tblSetup		util.Effect("projectiles_core_predicted",EffectData(),true,true)	endendfunction _PredictProjectile(objEffect)	local tblClassData = PredictedData	local objProj = Create(PredictedData.type,PredictedData.classdata)	objProj.Entity = objEffect.Entity	objProj:Predict(PredictedData.setup)		objEffect.ProjectileObject = objProj	local func = objProj.Initialize	if type(func) == "function" then		local bOk, valReturn = pcall(func,objProj)		if not bOk then			LibErrorHalt(valReturn)		end	else		LibErrorHalt("attempt to call non-function")	end	objProj.Index = table.insert(Projectiles,objProj)endfunction GetByIndex(numIndex)	if type(numIndex) == "number" and numIndex > 0 then		return Projectiles[numIndex] or NULL	end	return NULLend--Receive somebody else's projectile!local ReceivedData = {}usermessage.Hook("PhoenixProjectile",function (um)	local numType, numClass = um:ReadShort(), um:ReadShort()	local strType = PooledTypes[numType]	local tblClassData = GetPooledClassData(strType,numClass)	ReceivedData.type = strType	ReceivedData.classdata = tblClassData	ReceivedData.umsg = um	util.Effect("projectiles_core",EffectData(),true,true)end)function _ReceiveProjectile(objEffect)	local objProj = Create(ReceivedData.type,ReceivedData.classdata)	objProj.Entity = objEffect.Entity	objProj:Receive(ReceivedData.umsg)		objEffect.ProjectileObject = objProj	local func = objProj.Initialize	if type(func) == "function" then		local bOk, valReturn = pcall(func,objProj)		if not bOk then			LibErrorHalt(valReturn)		end	else		LibErrorHalt("attempt to call non-function")	end	objProj.Index = table.insert(Projectiles,objProj)endfunction _ThinkProjectile(objEffect)	local func = objEffect.ProjectileObject.Think	if type(func) == "function" then		local bOk, valReturn = pcall(func,objEffect.ProjectileObject)		if bOk then			if not valReturn then				Projectiles[objEffect.ProjectileObject.Index] = nil --Kill object			end			return valReturn		else			LibErrorHalt(valReturn)		end	else		LibErrorHalt("attempt to call non-function")	endendfunction _RenderProjectile(objEffect)	local func = objEffect.ProjectileObject.Render	if type(func) == "function" then		local bOk, valReturn = pcall(func,objEffect.ProjectileObject)		if not bOk then			LibErrorHalt(valReturn)		end	else		LibErrorHalt("attempt to call non-function")	endend
local DIR = "PhoenixLibrary/nw/"if not file.IsDir(DIR) then file.CreateDir(DIR) endhook.Add("ShutDown",NAME,function ()	if file.Exists(DIR.."pooled_strings.txt") then		file.Write(DIR.."pooled_strings.txt","")	endend)module("nw",package.seeall)local PooledStrings = {}local function LoadPooledStrings()	if file.Exists(DIR.."pooled_strings.txt") then		PooledStrings = {}		local strFile = file.Read(DIR.."pooled_strings.txt")		local tblLines = string.Explode('\n',strFile)		local strCurGroup = "generic"		for _, strLine in pairs(tblLines) do			local sep = string.Explode(' ',strLine)			if sep[1] then				strCurGroup = sep[1]				PooledStrings[strCurGroup] = {}				for i=2, #sep do					PooledStrings[strCurGroup][i] = sep[i]				end			end		end	else		LibError("File '"..DIR.."pooled_strings.txt' does not exist!")	endendhook.Add("Initialize",NAME,LoadPooledStrings)function GetPooledString(strGroup,num)	if type(num) ~= "number" then		num = strGroup		strGroup = "generic"	end	if type(num) ~= "number" then		LibErrorHalt("Pooled-string id is NaN.")	end	if not PooledStrings[strGroup] then		LibErrorHalt("Pooled-string group '"..tostring(strGroup).."' does not exist!")	end	if not PooledStrings[strGroup][num] then		LibErrorHalt("Pooled-string id '"..tostring(num).."' in group '"..tostring(strGroup).."' does not exist!")	end	return PooledStrings[strGroup][num]end